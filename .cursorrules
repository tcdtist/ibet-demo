{
  "rules": [
    {
      "description": "Architect Agent: Định nghĩa kiến trúc dự án, cấu trúc thư mục, config CI/CD, Bun/Next/Supabase.",
      "patterns": [
        "**/*"
      ],
      "prompts": [
        "Bạn là Architect. Hãy tạo cấu trúc thư mục và file cần thiết cho dự án 'igaming-demo'. Stack: Next.js 14 App Router + Supabase + TailwindCSS + TypeScript + Bun. Output: cây thư mục + nội dung file cơ bản (package.json, tsconfig.json, tailwind.config.ts, .env.example, .github/workflows/ci.yml)."
      ]
    },
    {
      "description": "Auth Agent: Setup Supabase Auth, middleware Next.js, session provider, hooks login/logout.",
      "patterns": [
        "src/lib/**",
        "src/app/login/**",
        "src/middleware.ts"
      ],
      "prompts": [
        "Bạn là Auth Agent. Hãy triển khai module Auth cho dự án 'igaming-demo': Supabase Auth (email/password + Google), middleware bảo vệ route, SupabaseProvider trong layout.tsx, hooks useUser(), useLogin(), useLogout()."
      ]
    },
    {
      "description": "CMS Agent: CRUD nội dung, upload file, trang quản trị CMS.",
      "patterns": [
        "src/app/admin/**",
        "src/app/api/posts/**",
        "src/components/cms/**"
      ],
      "prompts": [
        "Bạn là CMS Agent. Tạo module CMS cho 'igaming-demo': Model Post (id, title, slug, content, published_at), API Routes CRUD, Admin UI danh sách/tạo/sửa post, Upload ảnh qua Supabase Storage."
      ]
    },
    {
      "description": "SEO Agent: Tối ưu SEO, meta tags, structured data, sitemap, robots.txt.",
      "patterns": [
        "src/lib/seo.ts",
        "src/app/sitemap.ts",
        "src/app/robots.ts"
      ],
      "prompts": [
        "Bạn là SEO Agent. Tạo setup SEO cho 'igaming-demo': Dynamic meta (title, description, og:image), structured data JSON-LD, sitemap.xml và robots.txt tự động."
      ]
    },
    {
      "description": "Dashboard Agent: User/Admin dashboard, role-based access.",
      "patterns": [
        "src/app/dashboard/**",
        "src/app/admin/**",
        "src/components/dashboard/**"
      ],
      "prompts": [
        "Bạn là Dashboard Agent. Tạo UI dashboard cho 'igaming-demo': User Dashboard (profile, lịch sử hoạt động), Admin Dashboard (thống kê user, post), role-based access (admin, user)."
      ]
    },
    {
      "instruction": "## 🧠 SMART COMMIT RULES (Optimized)\n\n### CRITICAL PRINCIPLES\n1. Always analyze **ALL staged files TOGETHER** before deciding commit type.\n   - ❌ Do NOT decide based on the first or single file.\n   - ✅ Must wait until ALL files are processed.\n2. Commit type must reflect the **most impactful change**.\n   - Revised Priority: fix > feat > hotfix > perf > docs > test > config > build > style > ci > chore > beep > refactor.\n3. Only use `feat` if the change delivers **clear, user-facing NEW functionality** (UI, endpoint, CLI, new feature flag).\n   - ❌ Not allowed for: constants, messages, configs, renaming, refactors, or invisible changes.\n4. If changes span multiple categories, pick the **dominant type**.\n   - Example: fix + docs → use `fix`.\n   - If no dominant type → use `chore`.\n\n---\n\n## FORMAT RULES\n- `[optional emoji] type(scope): description`\n- Max 72 chars, single line, no trailing period\n- Imperative mood: add, fix, update, remove, create\n- Emoji allowed only at start (optional)\n\n---\n\n## TYPE DECISION TREE\n\n### 1. 🐛 fix → BUG FIXES (highest priority)\n- Broken logic, crash fixes, validation, errors, regressions\n\n### 2. ✨ feat → NEW FUNCTIONALITY (strict)\n- Only if NEW visible feature is added\n- New endpoints, UI components, CLI commands, user flows\n- ❌ Never use for constants, test data, or small tweaks\n\n### 3. 🔥 hotfix → CRITICAL FIXES\n- Urgent production issues, security patches, data corruption\n\n### 4. ⚡ perf → PERFORMANCE\n- Query optimization, caching, rendering improvements\n\n### 5. 📝 docs → DOCUMENTATION\n- README, inline comments, API docs\n\n### 6. 🧪 test → TESTS\n- Unit, integration, fixtures, mocks\n\n### 7. 🔧 config → CONFIGURATION\n- .env, eslint, prettier, app settings, constants, error codes\n\n### 8. 📦 build → BUILD/DEPENDENCIES\n- package.json, Webpack, bundler changes\n\n### 9. 💄 style → STYLING\n- Formatting, indentation, whitespace (no behavior change)\n\n### 10. 🚀 ci → CI/CD\n- GitHub Actions, Jenkins, deployment scripts\n\n### 11. 🧹 chore → MAINTENANCE\n- Repo housekeeping, scripts, version bumps\n- Mixed small changes without dominant type\n\n### 12. 📋 draft → DRAFT/EXPERIMENT\n- Work in progress, spike solutions\n\n### 13. 🔊 beep → MINOR TWEAKS\n- Typos, labels, tiny UI adjustments\n\n### 14. ⏪ revert → REVERT\n- Format: revert: revert \"original commit message\"\n\n### 15. ♻️ refactor → RESTRUCTURE (last resort)\n- Pure reorganization, no behavior change\n\n---\n\n## SCOPE RULES\n- Use the primary module: api, ui, auth, db, config, admin, user\n- Lowercase, hyphenated: user-profile, chat-room\n- Omit scope if multiple unrelated areas\n\n---\n\n## DESCRIPTION RULES\n- Start with strong verb: add, fix, remove, create, update, implement\n- Be specific: \"add OAuth2 login flow\" not \"add login\"\n- Describe WHAT changed, not HOW or WHY\n- No file paths or ticket numbers\n\n---\n\n## EMOJI MAP\n✨ feat, 🐛 fix, 🔥 hotfix, ⚡ perf, 📝 docs, 🧪 test\n💄 style, 📦 build, 🚀 ci, 🔧 config, 🧹 chore, 📋 draft\n🔊 beep, ⏪ revert, ♻️ refactor\n\n---\n\n## MULTI-FILE EXAMPLES\n- Fix bug + update README → 🐛 fix(api): handle null user data in profile endpoint\n- Add feature + update docs → ✨ feat(auth): add OAuth2 login & update docs\n- Refactor utils + style fixes → ♻️ refactor(utils): extract date formatter\n- Change eslint + constants → 🔧 config: update eslint rules & error codes\n- Small typo in UI → 🔊 beep(ui): correct button label\n- Mixed docs + style → 🧹 chore: update docs and lint fixes",
      "pattern": "commit"
    },
    {
      "instruction": "### 🔍 COMMIT ANALYSIS CHECKLIST (Strict)\n\nAlways review **all staged files together**:\n1. New user-facing functionality? → `feat`\n2. Fix broken behavior? → `fix`\n3. Urgent production/security? → `hotfix`\n4. Performance improvement? → `perf`\n5. Documentation only? → `docs`\n6. Test changes? → `test`\n7. Config, constants, error codes? → `config`\n8. Build/dependencies? → `build`\n9. Formatting only? → `style`\n10. CI/CD pipeline? → `ci`\n11. Repo maintenance? → `chore`\n12. Draft/experiment? → `draft`\n13. Minor tweak/typo? → `beep`\n14. Revert? → `revert`\n15. Pure restructure, same behavior? → `refactor`\n\n---\n\n⚠️ RULES TO AVOID MISTAKES\n- ❌ Do NOT mark `feat` unless feature is **visible to users**\n- ❌ Do NOT stop analysis after first file\n- ✅ For mixed changes, pick the **dominant type**\n- ✅ If no dominant type → use `chore`\n- ✅ Constants/messages/configs NEVER count as `feat`",
      "pattern": "commit-analysis"
    }
  ]
}